import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    id 'com.epages.restdocs-api-spec' version "0.19.2"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

group = 'com.business'
version = '0.0.1-SNAPSHOT'


tasks.withType(BootJar).configureEach {
    enabled = false
}

ext {
    set('querydslVersion', "5.0.0") // QueryDSL 버전 명시적으로 설정
}

def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'

    implementation 'com.github.numberOnethemepark:common:0.0.6'

    //feignClient
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    //querydsl
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}


// 컴파일 시 빌드 폴더를 지웁니다.
compileJava {
    dependsOn 'clean'
}

// OpenApi에 들어갈 메타데이터를 추가합니다.
// 모놀리식일 경우 해당 프로젝트의 주소를 입력하고,
// MSA일 경우 게이트웨이의 주소를 입력하면 됩니다.
openapi3 {
    servers = [
            {
                url = 'http://localhost:8080'
            }
    ]
    title = 'THEMEPARK API'
    description = 'API for themepark-service'
    version = '1.0.0'
    format = 'json'
}

// task를 만듭니다.
tasks.register('setDocs') {
    // openapi3 태스크를 먼저 실행합니다.
    dependsOn 'openapi3'
    // 문서가 다 생성되면 build 파일에 복사합니다.
    // MSA일 경우 파일명이 중복될 수 있으므로,
    // 파일명 뒤에 서비스명을 붙여줍시다.
    doLast {
        copy {
            from "build/api-spec"
            include "*.json"
            include "*.yaml"
            into "build/resources/main/static/springdoc"
            rename { String fileName ->
                if (fileName.endsWith('.json')) {
                    return fileName.replace('.json', '-themepark-service.json')
                } else if (fileName.endsWith('.yaml')) {
                    return fileName.replace('.yaml', '-themepark-service.yml')
                }
                return fileName
            }
        }
    }
}

// bootRun 실행 시 문서 생성 태스크를 실행합니다.
bootRun {
    dependsOn 'setDocs'
}

// bootJar 실행 시 문서 생성 태스크를 실행합니다.
bootJar {
    dependsOn 'setDocs'
}