plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.epages.restdocs-api-spec' version "0.19.2"
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
}

group = 'com.business'
version = '0.0.1-SNAPSHOT'

ext {
	set('springCloudVersion', "2024.0.0")
	set('querydslVersion', "5.0.0")
}

def querydslSrcDir = 'src/main/generated'

clean {
	delete file(querydslSrcDir)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	// Spring Cloud starter
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	// Jakarta & JPA
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'

	// OpenAPI, RestDocs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'

	// FeignClient
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

	// Actuator & Miscellaneous
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.fasterxml.jackson.core:jackson-databind'


	// Lombok
	implementation 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	// Common libraries
	implementation 'com.github.numberOnethemepark:common:0.0.7'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
	dependsOn 'clean'
}

// OpenAPI 설정
openapi3 {
	servers = [
			{
				url = 'http://localhost:8080'
			}
	]
	title = 'ORDER-PAYMENT API'
	description = 'API for order-service / payment-service'
	version = '1.0.0'
	format = 'json'
}

// 문서 생성 태스크
tasks.register('setDocs') {
	dependsOn 'openapi3'
	doLast {
		copy {
			from "build/api-spec"
			include "*.json"
			include "*.yaml"
			into "build/resources/main/static/springdoc"
			rename { String fileName ->
				if (fileName.endsWith('.json')) {
					return fileName.replace('.json', '-order-service.json')
				} else if (fileName.endsWith('.yaml')) {
					return fileName.replace('.yaml', '-order-service.yml')
				}
				return fileName
			}
		}
	}
}

bootRun {
	dependsOn 'setDocs'
}

bootJar {
	dependsOn 'setDocs'
}